// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  username        String         @unique
  handle          String         @unique
  password        String?        // Nullable for social logins
  profileImage    String?        // URL to profile image
  bio             String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  followers       Follow[]       @relation("follower")
  following       Follow[]       @relation("following")
  communities     Membership[]
  messages        Message[]      @relation("sender")
  receivedMsgs    Message[]      @relation("recipient")
  notifications   Notification[] @relation("notificationTarget")
  causedNotifs    Notification[] @relation("notificationSource")
  metrics         UserMetrics?
}

model UserMetrics {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique
  impressionsCount Int      @default(0)
  followersGrowth  Int      @default(0)
  postEngagement   Float    @default(0) // Average engagement rate
  updatedAt        DateTime @updatedAt
}

model Post {
  id          String     @id @default(cuid())
  text        String
  images      String?    // JSON array of image URLs
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  impressions Int        @default(0)
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Community {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     Membership[]
  posts       Post[]
}

model Membership {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  role        String    @default("member") // "admin", "moderator", "member"
  createdAt   DateTime  @default(now())

  @@unique([userId, communityId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  type       String   // "follow", "like", "comment", "mention", etc.
  read       Boolean  @default(false)
  user       User     @relation("notificationTarget", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  sourceUser User?    @relation("notificationSource", fields: [sourceId], references: [id])
  sourceId   String?
  postId     String?
  message    String?
  createdAt  DateTime @default(now())
}

model Advertisement {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  link      String?
  active    Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}